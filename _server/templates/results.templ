package templates

import (
	"fmt"
	"strings"

	"github.com/rubiojr/gasdb/pkg/api"
	"github.com/rubiojr/gasdb/_server/translations"
)

templ ResultsPage(stations []api.StationWithDistance, query string, lat, lng, radius float64, err error, t translations.Translations) {
	@Base(t.ResultsTitle, t) {
		<div class="results">
		<div class="mb-4">
			<h1>{ t.NearbyStations }</h1>
			if query != "" {
				<p>{ t.ResultsFor } <strong>{ query }</strong></p>
			} else {
				<p>{ t.ResultsForCoords } <strong>{ fmt.Sprintf("%.6f, %.6f", lat, lng) }</strong></p>
			}
			<p>{ t.SearchRadius } <strong>{ fmt.Sprintf("%.1f km", radius) }</strong></p>
			<a href="/" class="btn btn-dark">{ t.NewSearchButton }</a>
		</div>

		if len(stations) == 0 && err == nil {
			<div class="alert alert-info">
				{ t.NoStationsFound } { fmt.Sprintf("%.1f km", radius) } { t.OfYourLocation }
			</div>
		} else if err != nil {
			<div class="alert alert-error">
				{ t.LocationNotFound }
			</div>
		} else {
			<p>{ t.StationsFound } <strong>{ fmt.Sprintf("%d", len(stations)) }</strong> { t.StationsWithin } { fmt.Sprintf("%.1f km", radius) }</p>

			for _, station := range stations {
				@StationCard(station, t)
			}
		}
		</div>
	}
}

templ StationCard(station api.StationWithDistance, t translations.Translations) {
	<div class="card station-card">
		<div class="card-body">
			<div class="mb-2">
				<span class="card-title mr-2 mb-3">{ station.Station.Rotulo }</span>
				<span>
					<a
						href={ templ.SafeURL(fmt.Sprintf("https://www.openstreetmap.org/?mlat=%s&mlon=%s&zoom=16",
							formatDecimal(station.Station.Latitud),
							formatDecimal(station.Station.Longitud))) }
						target="_blank"
						class="btn btn-map btn-sm mr-2"
						alt={ t.MapAltOSM }
					>
					{ t.MapButton }
					</a>
					<a
						href={ templ.SafeURL(fmt.Sprintf("https://www.google.com/maps?q=%s,%s",
							formatDecimal(station.Station.Latitud),
							formatDecimal(station.Station.Longitud))) }
						target="_blank"
						class="btn btn-map btn-sm"
						alt={ t.MapAltGoogle }
					>
					{ t.GoogleMapsButton }
					</a>
				</span>
			</div>
			<div class="mb-2">
				<span class="card-subtitle text-muted">{ station.Station.Direccion }</span>
				<span class="col-md-6 text-success"><strong>{ fmt.Sprintf("%.2f %s", station.Distance/1000, t.KmAway) }</strong></span>
			</div>

			<div class="row">
				<div class="col-md-6">
					<div class="price-item">
						<span class="text-muted">{ t.Gasoline95 }</span>
						<strong>{ formatPrice(station.Station.PrecioGasolina95E5, t.NotAvailable) }</strong>
					</div>
					<div class="price-item">
						<span class="text-muted">{ t.Gasoline98 }</span>
						<strong>{ formatPrice(station.Station.PrecioGasolina98E5, t.NotAvailable) }</strong>
					</div>
				</div>
				<div class="col-md-6">
					<div class="price-item">
						<span class="text-muted">{ t.Diesel }</span>
						<strong>{ formatPrice(station.Station.PrecioGasoleoA, t.NotAvailable) }</strong>
					</div>
					<div class="price-item">
						<span class="text-muted">{ t.PremiumDiesel }</span>
						<strong>{ formatPrice(station.Station.PrecioGasoleoPremium, t.NotAvailable) }</strong>
					</div>
				</div>
			</div>
		</div>
	</div>
}

func formatPrice(value string, notAvailable string) string {
	if value == "" {
		return notAvailable
	}
	return strings.Replace(value, ",", ".", 1) + " â‚¬"
}

func formatDecimal(value string) string {
	return strings.Replace(value, ",", ".", 1)
}
